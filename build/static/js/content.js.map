{"version":3,"file":"static/js/content.js","mappings":"yBAAO,IAAKA,GAAZ,SAAYA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAZ,CAAYA,IAAAA,EAAAA,KCEZ,IAMMC,EAA+B,SAClCC,EACAC,EACAC,GAEA,IAAMC,EAXc,SACpBH,EACAC,GAEA,OAAOA,EAAOG,KAAOC,OAAOC,QAAQF,IAAMJ,EAAQO,OAAST,EAAOU,MAO9CC,CAAeT,EAASC,GACxCE,GACDD,EAASQ,SAASC,QAIrBC,QAAQC,IAAI,qBAIZR,OAAOC,QAAQQ,UAAUC,YAAYhB,G","sources":["types/ChromeTypes.ts","chrome/content.ts"],"sourcesContent":["export enum Sender {\r\n   React,\r\n   Content,\r\n}\r\n\r\nexport interface ChromeMessage {\r\n   from: Sender\r\n   message: any\r\n}\r\n","import { ChromeMessage, Sender } from '../types/ChromeTypes'\r\ntype MessageResponse = (response?: any) => void\r\nconst validateSender = (\r\n   message: ChromeMessage,\r\n   sender: chrome.runtime.MessageSender\r\n) => {\r\n   return sender.id === chrome.runtime.id && message.from === Sender.React\r\n}\r\nconst messagesFromReactAppListener = (\r\n   message: ChromeMessage,\r\n   sender: chrome.runtime.MessageSender,\r\n   response: MessageResponse\r\n) => {\r\n   const isValidated = validateSender(message, sender)\r\n   if (isValidated) {\r\n      response(document.title)\r\n   }\r\n}\r\nconst main = () => {\r\n   console.log('[content.ts] Main')\r\n   /**\r\n    * Fired when a message is sent from either an extension process or a content script.\r\n    */\r\n   chrome.runtime.onMessage.addListener(messagesFromReactAppListener)\r\n}\r\nmain()\r\n"],"names":["Sender","messagesFromReactAppListener","message","sender","response","isValidated","id","chrome","runtime","from","React","validateSender","document","title","console","log","onMessage","addListener"],"sourceRoot":""}